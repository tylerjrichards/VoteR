lengthPOne <- lengthPOne + as.numeric(nchar(as.character(person_one$text[i])))
}
for(i in 1:(nrow(person_one))){
lengthPTwo <- lengthPTwo + as.numeric(nchar(as.character(person_two$text[i])))
}
person_one$percent_content <- (lengthPOne/(lengthPTwo + lengthPOne))
person_two$percent_content <- (lengthPTwo/(lengthPTwo + lengthPOne))
person_one$timediff <- 0
person_two$timediff <- 0
timediff1 <- 0
timediff2 <- 0
y <- 0
h <- 0
for(i in 1:(nrow(df)-1)){
if(as.numeric(df$ID[i]) != as.numeric(df$ID[i+1])){
if(df$ID[i] == x[1]){
y <- as.numeric(df$timestamp[i+1]) - as.numeric(df$timestamp[i])
if(y < 60){
timediff1 <- union(timediff1, y)
}
}
if(df$ID[i] == x[2]){
h <- as.numeric(df$timestamp[i+1]) - as.numeric(df$timestamp[i])
if(h < 60) {
timediff2 <- union(timediff2, h)
}
}
}
}
timediff1 <- timediff1[-1]
timediff2 <- timediff2[-1]
person_one$avg_timediff <- mean(timediff1)
person_two$avg_timediff <- mean(timediff2)
person_one$diff_elo <- as.numeric(person_one$ELO[1]) - as.numeric(person_two$ELO[1])
person_two$diff_elo <- as.numeric(person_two$ELO[1]) - as.numeric(person_one$ELO[1])
person_one <- head(person_one, 1)
person_one <- person_one[c(1, 7, 8, 9, 10, 11)]
person_two <- head(person_two, 1)
person_two <- person_two[c(1, 7, 8, 9, 10, 11)]
total <- rbind(person_two, person_one)
my_data <- total
View(my_data)
demo <- read.csv("~/Documents/Data_Projects/demo.csv")
View(demo)
my_data <- demo
my_data <- read.csv(inFile$datapath)
colnames(my_data) <- c("ID", "ELO", "text", "timestamp")
textdata <- my_data
textdata$polarity <- polarity(text.var = textdata$text, constrain = TRUE)$all$polarity
df <- textdata
x <- unique(df$ID)
person_one <- subset(df, ID == x[1])
person_two <- subset(df, ID == x[2])
person_one$avg_polarity <- .5*mean(mean(as.numeric(person_one$polarity))+ mean(as.numeric(person_two$polarity)))
person_two$avg_polarity <- .5*mean(mean(as.numeric(person_one$polarity))+ mean(as.numeric(person_two$polarity)))
person_one$percent_messages <- (nrow(person_one)/(nrow(person_two)+nrow(person_one)))
person_two$percent_messages <- (nrow(person_two)/(nrow(person_two)+nrow(person_one)))
lengthPOne <- 0
lengthPTwo <- 0
for(i in 1:(nrow(person_one))){
lengthPOne <- lengthPOne + as.numeric(nchar(as.character(person_one$text[i])))
}
for(i in 1:(nrow(person_one))){
lengthPTwo <- lengthPTwo + as.numeric(nchar(as.character(person_two$text[i])))
}
person_one$percent_content <- (lengthPOne/(lengthPTwo + lengthPOne))
person_two$percent_content <- (lengthPTwo/(lengthPTwo + lengthPOne))
person_one$timediff <- 0
person_two$timediff <- 0
timediff1 <- 0
timediff2 <- 0
y <- 0
h <- 0
for(i in 1:(nrow(df)-1)){
if(as.numeric(df$ID[i]) != as.numeric(df$ID[i+1])){
if(df$ID[i] == x[1]){
y <- as.numeric(df$timestamp[i+1]) - as.numeric(df$timestamp[i])
if(y < 60){
timediff1 <- union(timediff1, y)
}
}
if(df$ID[i] == x[2]){
h <- as.numeric(df$timestamp[i+1]) - as.numeric(df$timestamp[i])
if(h < 60) {
timediff2 <- union(timediff2, h)
}
}
}
}
timediff1 <- timediff1[-1]
timediff2 <- timediff2[-1]
person_one$avg_timediff <- mean(timediff1)
person_two$avg_timediff <- mean(timediff2)
person_one$diff_elo <- as.numeric(person_one$ELO[1]) - as.numeric(person_two$ELO[1])
person_two$diff_elo <- as.numeric(person_two$ELO[1]) - as.numeric(person_one$ELO[1])
View(person_one)
person_one <- person_one[c(1, 6, 7, 8, 10, 11)]
person_two <- head(person_two, 1)
person_two <- person_two[c(1, 6, 7, 8, 9, 10, 11)]
person_one <- head(person_one, 1)
total <- rbind(person_two, person_one)
shiny::runApp('Documents/Data_Projects/Shinyapps/histogram')
rsconnect::deployApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
remove.packages('Rstem')
rsconnect::deployApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
install.packages(packageName, repos = "http://www.omegahat.net/R", type = "source")
install.packages(packageName, repos = "http://www.omegahat.net/R")
install.packages(Rstem, repos = "http://www.omegahat.net/R")
install.packages("Rstem", repos = "http://www.omegahat.org/R", type="source")
devtools::install_github('omegahat/Rstem')
install.packages("Rstem")
rsconnect::deployApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
})
}
shiny::runApp('Documents/Data_Projects/Shinyapps/Practice')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
rsconnect::deployApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
shiny::runApp('Documents/Data_Projects/Shinyapps/Suave_Tinder')
sim.summary <- read.csv("~/Downloads/sim.summary.csv")
View(sim.summary)
install.packages("sendmailR")
library(sendmailR)
from <- "tylerjrichards@gmail.com"
to <- "tylerjrichards@gmail.com"
subject <- "Emotion"
body <- "This is the result of the test:"
mailControl=list(smtpServer="snmpt server address")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
from <- "<tylerjrichards@gmail.com>"
to <- "<tylerjrichards@gmail.com>"
subject <- "Emotion"
body <- "This is the result of the test:"
mailControl=list(smtpServer="snmpt server address")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
library(mailR)
install.packages("mailR")
library(mailR)
sender <- "tylerjrichards@gmail.com"
recipients <- c("tylerjrichards@gmail.com")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
img.url     = 'https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg'
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = 'ec9d95c4653141658eb8a4b6ed9c40ae'
mybody = list(url = img.url)
img.url     = 'http://thepeak.tv/wp-content/uploads/2015/11/2013-03-03T151338Z_2_CBRE9210K7L00_RTROPTP_4_USA-FISCAL-OBAMA-SHUTDOWN.jpg'
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = 'ec9d95c4653141658eb8a4b6ed9c40ae'
mybody = list(url = img.url)
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
img.url     = 'http://www.thedailyrash.com/wp-content/uploads/2013/07/obama-sad-looking-down-500x281.jpg'
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
emotionKEY = 'ec9d95c4653141658eb8a4b6ed9c40ae'
mybody = list(url = img.url)
# Request data from Microsoft
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
faceEMO
Obama = httr::content(faceEMO)[[1]]
Obama
options(RCurlOptions = list(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
httpauth=AUTH_BASIC
)
)
library(httr)
library(RCurl)
options(RCurlOptions = list(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
httpauth=AUTH_BASIC
)
)
library(sendmailR)
from <- "<tylerjrichards@gmail.com>"
to <- "<tylerjrichards@gmail.com>"
subject <- "Emotion"
body <- "This is the result of the test:"
mailControl=list(smtpServer="snmpt server address")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
library(mailR)
sender <- "tylerjrichards@gmail.com"
recipients <- c("tylerjrichards@gmail.com")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library(mailR)
sender <- "tylerjrichards@gmail.com"
recipients <- c("tylerjrichards@gmail.com")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
Obama$disgust
print(Obama)
print(Obama$scores$anger)
print(Obama$scores)
library("httr")
library("XML")
library("stringr")
library("ggplot2")
library("plumber")
emote <- function(url){
print("hello")
img.url = url
#http://www.thedailyrash.com/wp-content/uploads/2013/07/obama-sad-looking-down-500x281.jpg
#https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg
#http://thepeak.tv/wp-content/uploads/2015/11/2013-03-03T151338Z_2_CBRE9210K7L00_RTROPTP_4_USA-FISCAL-OBAMA-SHUTDOWN.jpg
# Define Microsoft API URL to request data
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
# Define access key (access key is available via: https://www.microsoft.com/cognitive-services/en-us/emotion-api)
emotionKEY = 'ec9d95c4653141658eb8a4b6ed9c40ae'
# Define image
mybody = list(url = img.url)
# Request data from Microsoft
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
# Show request results (if Status=200, request is okay)
faceEMO
# Reuqest results from face analysis
Obama = httr::content(faceEMO)[[1]]
Obama
print(Obama$scores)
x <- Obama$scores
x <- max(Obama$scores$anger, Obama$scores$contempt, Obama$scores$disgust, Obama$scores$fear, Obama$scores$happiness, Obama$scores$sadness)
library(mailR)
sender <- "emoteuf@gmail.com"
recipients <- c("emoteuf@gmail.com", "4076836172@tmomail.net", "5618664321@txt.att.net")
if(Obama$scores$anger == x) {
send.mail(from = sender,
to = recipients,
subject = "Anger",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "emoteuf@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$happiness == x) {
send.mail(from = sender,
to = recipients,
subject = "Happiness",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "emoteuf@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$contempt == x) {
send.mail(from = sender,
to = recipients,
subject = "Contempt",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$disgust == x) {
send.mail(from = sender,
to = recipients,
subject = "Disgust",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$fear == x) {
send.mail(from = sender,
to = recipients,
subject = "Fear",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$sadness == x) {
send.mail(from = sender,
to = recipients,
subject = "Sadness",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
}
emote('https://media.licdn.com/mpr/mpr/shrinknp_200_200/AAEAAQAAAAAAAAlsAAAAJDE2N2FmYjlhLWI3MTEtNDQ5Mi04OWE4LTBjMjZiYjI5ZWE3ZA.jpg')
emote <- function(url){
print("hello")
img.url = url
#http://www.thedailyrash.com/wp-content/uploads/2013/07/obama-sad-looking-down-500x281.jpg
#https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/44_barack_obama[1].jpg
#http://thepeak.tv/wp-content/uploads/2015/11/2013-03-03T151338Z_2_CBRE9210K7L00_RTROPTP_4_USA-FISCAL-OBAMA-SHUTDOWN.jpg
# Define Microsoft API URL to request data
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
# Define access key (access key is available via: https://www.microsoft.com/cognitive-services/en-us/emotion-api)
emotionKEY = 'ec9d95c4653141658eb8a4b6ed9c40ae'
# Define image
mybody = list(url = img.url)
# Request data from Microsoft
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emotionKEY)),
body = mybody,
encode = 'json'
)
# Show request results (if Status=200, request is okay)
faceEMO
# Reuqest results from face analysis
Obama = httr::content(faceEMO)[[1]]
Obama
print(Obama$scores)
x <- Obama$scores
x <- max(Obama$scores$anger, Obama$scores$contempt, Obama$scores$disgust, Obama$scores$fear, Obama$scores$happiness, Obama$scores$sadness)
library(mailR)
sender <- "emoteuf@gmail.com"
recipients <- c("emoteuf@gmail.com", "4076836172@tmomail.net")
if(Obama$scores$anger == x) {
send.mail(from = sender,
to = recipients,
subject = "Anger",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "emoteuf@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$happiness == x) {
send.mail(from = sender,
to = recipients,
subject = "Happiness",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "emoteuf@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$contempt == x) {
send.mail(from = sender,
to = recipients,
subject = "Contempt",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$disgust == x) {
send.mail(from = sender,
to = recipients,
subject = "Disgust",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$fear == x) {
send.mail(from = sender,
to = recipients,
subject = "Fear",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
if(Obama$scores$sadness == x) {
send.mail(from = sender,
to = recipients,
subject = "Sadness",
body = " ",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "tylerjrichards@gmail.com",
passwd = "ldtchs1850", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
}
}
emote('http://cdn.c.photoshelter.com/img-get/I0000LHznQdOykmY/s/500/HS-021913-040-MJ.jpg')
emote('https://pbs.twimg.com/profile_images/745577749172097024/4-5bJidy.jpg')
emote('https://pbs.twimg.com/profile_images/509047725200261120/n9bWjhvG.jpeg')
library("httr")
library("XML")
library("stringr")
library("ggplot2")
library("plumber")
setwd("~/Documents/Data_Projects/Packages")
library(devtools)
library("devtools")
install.packages("devtools")
install.packages("roxygen2")
library(roxygen2)
library(devtools)
library(devtools)
install("VoteR")
library(VoteR)
ls("VoteR")
ls(pos = "package:VoteR")
setwd("~/Documents/Data_Projects/Packages/VoteR")
document()
setwd()
setwd("~/Documents/Data_Projects/Packages")
library(devtools)
create("VoteR")
setwd("./VoteR")
document()
setwd("./VoteR")
document()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
setwd("~/Documents/Data_Projects/Packages/VoteR")
roxygen2::roxygenise()
document()
document()
roxygen2::roxygenise()
setwd("~/Documents/Data_Projects/Packages/VoteR")
roxygen2::roxygenise()
document()
library(roxygen2)
library(devtools)
setwd("~/Documents/Data_Projects/Packages/VoteR")
document()
devtools::document()
document()
setwd("~/Documents/Data_Projects/Packages/VoteR")
document()
